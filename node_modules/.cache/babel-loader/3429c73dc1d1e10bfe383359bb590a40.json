{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\federico.r\\\\reduxobservable\\\\fullstack\\\\MERNTask\\\\MERNTASKS-cliente\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:\\\\Users\\\\federico.r\\\\reduxobservable\\\\fullstack\\\\MERNTask\\\\MERNTASKS-cliente\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\federico.r\\\\reduxobservable\\\\fullstack\\\\MERNTask\\\\MERNTASKS-cliente\\\\src\\\\components\\\\tareas\\\\FormTarea.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useContext, useState, useEffect } from 'react';\nimport proyectoContext from '../../context/proyectos/proyectoContext';\nimport tareaContext from '../../context/tareas/tareaContext';\n\nconst FormTarea = () => {\n  // Extrar si un proyecto esta activo\n  const proyectosContext = useContext(proyectoContext);\n  const proyecto = proyectosContext.proyecto; // obtener la función del context de tarea\n\n  const tareasContext = useContext(tareaContext);\n  const tareaseleccionada = tareasContext.tareaseleccionada,\n        errortarea = tareasContext.errortarea,\n        agregarTarea = tareasContext.agregarTarea,\n        validarTarea = tareasContext.validarTarea,\n        obtenerTareas = tareasContext.obtenerTareas,\n        actualizarTarea = tareasContext.actualizarTarea,\n        limpiarTarea = tareasContext.limpiarTarea; // Effect que detecta si hay una tarea seleccionada\n\n  useEffect(() => {\n    if (tareaseleccionada !== null) {\n      guardarTarea(tareaseleccionada);\n    } else {\n      guardarTarea({\n        nombre: ''\n      });\n    }\n  }, [tareaseleccionada]); // State del formulario\n\n  const _useState = useState({\n    nombre: ''\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        tarea = _useState2[0],\n        guardarTarea = _useState2[1]; // extraer el nombre del proyecto\n\n\n  const nombre = tarea.nombre; // Si no hay proyecto seleccionado\n\n  if (!proyecto) return null; // Array destructuring para extraer el proyecto actual\n\n  const _proyecto = _slicedToArray(proyecto, 1),\n        proyectoActual = _proyecto[0]; // Leer los valores del formulario\n\n\n  const handleChange = e => {\n    guardarTarea(_objectSpread({}, tarea, {\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  const onSubmit = e => {\n    e.preventDefault(); // validar\n\n    if (nombre.trim() === '') {\n      validarTarea();\n      return;\n    } // Si es edición o si es nueva tarea\n\n\n    if (tareaseleccionada === null) {\n      // agregar la nueva tarea al state de tareas\n      tarea.proyecto = proyectoActual._id;\n      agregarTarea(tarea);\n    } else {\n      // actualizar tarea existente\n      actualizarTarea(tarea); // Elimina tareaseleccionada del state\n\n      limpiarTarea();\n    } // Obtener y filtrar las tareas del proyecto actual\n\n\n    obtenerTareas(proyectoActual.id); // reiniciar el form\n\n    guardarTarea({\n      nombre: ''\n    });\n  };\n\n  return React.createElement(\"div\", {\n    className: \"formulario\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: onSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"contenedor-input\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    className: \"input-text\",\n    placeholder: \"Nombre Tarea...\",\n    name: \"nombre\",\n    value: nombre,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"contenedor-input\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"submit\",\n    className: \"btn btn-primario btn-submit btn-block\",\n    value: tareaseleccionada ? 'Editar Tarea' : 'Agregar Tarea',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }))), errortarea ? React.createElement(\"p\", {\n    className: \"mensaje error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, \"El nombre de la tarea es obligatorio\") : null);\n};\n\nexport default FormTarea;","map":{"version":3,"sources":["C:/Users/federico.r/reduxobservable/fullstack/MERNTask/MERNTASKS-cliente/src/components/tareas/FormTarea.js"],"names":["React","useContext","useState","useEffect","proyectoContext","tareaContext","FormTarea","proyectosContext","proyecto","tareasContext","tareaseleccionada","errortarea","agregarTarea","validarTarea","obtenerTareas","actualizarTarea","limpiarTarea","guardarTarea","nombre","tarea","proyectoActual","handleChange","e","target","name","value","onSubmit","preventDefault","trim","_id","id"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from 'react';  \r\nimport proyectoContext from '../../context/proyectos/proyectoContext';\r\nimport tareaContext from '../../context/tareas/tareaContext';\r\n\r\nconst FormTarea = () => {\r\n\r\n    // Extrar si un proyecto esta activo\r\n    const proyectosContext = useContext(proyectoContext);\r\n    const { proyecto } = proyectosContext;\r\n\r\n    // obtener la función del context de tarea\r\n    const tareasContext = useContext(tareaContext);\r\n    const { tareaseleccionada,  errortarea, agregarTarea, validarTarea, obtenerTareas, actualizarTarea, limpiarTarea } = tareasContext;\r\n\r\n    // Effect que detecta si hay una tarea seleccionada\r\n    useEffect(() => {\r\n        if(tareaseleccionada !== null) {\r\n            guardarTarea(tareaseleccionada)\r\n        } else {\r\n            guardarTarea({\r\n                nombre: ''\r\n            })\r\n        }\r\n    }, [  tareaseleccionada]); \r\n\r\n    // State del formulario\r\n    const [tarea, guardarTarea] = useState({\r\n        nombre: ''\r\n    })\r\n\r\n    // extraer el nombre del proyecto\r\n    const { nombre } = tarea;\r\n\r\n    // Si no hay proyecto seleccionado\r\n    if(!proyecto) return null;\r\n\r\n    // Array destructuring para extraer el proyecto actual\r\n    const [proyectoActual] =  proyecto;\r\n\r\n    // Leer los valores del formulario\r\n    const handleChange = e => {\r\n        guardarTarea({\r\n            ...tarea,\r\n            [e.target.name] : e.target.value\r\n        })\r\n    }\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        // validar\r\n        if(nombre.trim() === '' ) {\r\n            validarTarea();\r\n            return;\r\n        }\r\n\r\n        // Si es edición o si es nueva tarea\r\n        if(tareaseleccionada === null ) {\r\n            // agregar la nueva tarea al state de tareas\r\n            tarea.proyecto = proyectoActual._id;\r\n            agregarTarea(tarea);\r\n        } else {\r\n            // actualizar tarea existente\r\n            actualizarTarea(tarea);\r\n\r\n            // Elimina tareaseleccionada del state\r\n            limpiarTarea();\r\n        }\r\n        // Obtener y filtrar las tareas del proyecto actual\r\n        obtenerTareas(proyectoActual.id);\r\n\r\n        // reiniciar el form\r\n        guardarTarea({\r\n            nombre: ''\r\n        })\r\n    }\r\n\r\n    return ( \r\n        <div className=\"formulario\">\r\n            <form\r\n                onSubmit={onSubmit}\r\n            >\r\n                <div className=\"contenedor-input\">\r\n                    <input \r\n                        type=\"text\"\r\n                        className=\"input-text\"\r\n                        placeholder=\"Nombre Tarea...\"\r\n                        name=\"nombre\"\r\n                        value={nombre}\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"contenedor-input\">\r\n                    <input \r\n                        type=\"submit\"\r\n                        className=\"btn btn-primario btn-submit btn-block\"\r\n                        value={tareaseleccionada ? 'Editar Tarea' : 'Agregar Tarea'}\r\n                    />\r\n                </div>\r\n            </form>\r\n\r\n            {errortarea ? <p className=\"mensaje error\">El nombre de la tarea es obligatorio</p> : null }\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default FormTarea;"]},"metadata":{},"sourceType":"module"}