{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\federico.r\\\\reduxobservable\\\\fullstack\\\\MERNTask\\\\MERNTASKS-cliente\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\federico.r\\\\reduxobservable\\\\fullstack\\\\MERNTask\\\\MERNTASKS-cliente\\\\src\\\\context\\\\autenticacion\\\\authState.js\";\nimport React, { useReducer } from 'react';\nimport AuthContext from './authContext';\nimport AuthReducer from './authReducer';\nimport clienteAxios from '../../config/axios';\nimport tokenAuth from '../../config/token';\nimport { REGISTRO_EXITOSO, REGISTRO_ERROR, OBTENER_USUARIO, LOGIN_EXITOSO, LOGIN_ERROR, CERRAR_SESION } from '../../types';\n\nconst AuthState = props => {\n  const initialState = {\n    token: localStorage.getItem('token'),\n    autenticado: null,\n    usuario: null,\n    mensaje: null,\n    cargando: true\n  };\n\n  const _useReducer = useReducer(AuthReducer, initialState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1];\n\n  const registrarUsuario = async datos => {\n    try {\n      const respuesta = await clienteAxios.post('/api/usuarios', datos);\n      console.log(respuesta.data);\n      dispatch({\n        type: REGISTRO_EXITOSO,\n        payload: respuesta.data\n      }); // Obtener el usuario\n\n      usuarioAutenticado();\n    } catch (error) {\n      // console.log(error.response.data.msg);\n      const alerta = {\n        msg: error.response.data.msg,\n        categoria: 'alerta-error'\n      };\n      dispatch({\n        type: REGISTRO_ERROR,\n        payload: alerta\n      });\n    }\n  }; // Retorna el usuario autenticado\n\n\n  const usuarioAutenticado = async () => {\n    const token = localStorage.getItem('token');\n\n    if (token) {\n      tokenAuth(token);\n    }\n\n    try {\n      const respuesta = await clienteAxios.get('/api/auth'); // console.log(respuesta);\n\n      dispatch({\n        type: OBTENER_USUARIO,\n        payload: respuesta.data.usuario\n      });\n    } catch (error) {\n      console.log(error.response);\n      dispatch({\n        type: LOGIN_ERROR\n      });\n    }\n  }; // Cuando el usuario inicia sesión\n\n\n  const iniciarSesion = async datos => {\n    try {\n      const respuesta = await clienteAxios.post('/api/auth', datos);\n      dispatch({\n        type: LOGIN_EXITOSO,\n        payload: respuesta.data\n      }); // Obtener el usuario\n\n      usuarioAutenticado();\n    } catch (error) {\n      console.log(error.response.data.msg);\n      const alerta = {\n        msg: error.response.data.msg,\n        categoria: 'alerta-error'\n      };\n      dispatch({\n        type: LOGIN_ERROR,\n        payload: alerta\n      });\n    }\n  }; // Cierra la sesión del usuario\n\n\n  const cerrarSesion = () => {\n    dispatch({\n      type: CERRAR_SESION\n    });\n  };\n\n  return React.createElement(AuthContext.Provider, {\n    value: {\n      token: state.token,\n      autenticado: state.autenticado,\n      usuario: state.usuario,\n      mensaje: state.mensaje,\n      cargando: state.cargando,\n      registrarUsuario,\n      iniciarSesion,\n      usuarioAutenticado,\n      cerrarSesion\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default AuthState;","map":{"version":3,"sources":["C:/Users/federico.r/reduxobservable/fullstack/MERNTask/MERNTASKS-cliente/src/context/autenticacion/authState.js"],"names":["React","useReducer","AuthContext","AuthReducer","clienteAxios","tokenAuth","REGISTRO_EXITOSO","REGISTRO_ERROR","OBTENER_USUARIO","LOGIN_EXITOSO","LOGIN_ERROR","CERRAR_SESION","AuthState","props","initialState","token","localStorage","getItem","autenticado","usuario","mensaje","cargando","state","dispatch","registrarUsuario","datos","respuesta","post","console","log","data","type","payload","usuarioAutenticado","error","alerta","msg","response","categoria","get","iniciarSesion","cerrarSesion","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\r\nimport AuthContext from './authContext';\r\nimport AuthReducer from './authReducer';\r\n\r\nimport clienteAxios from '../../config/axios';\r\nimport tokenAuth from '../../config/token';\r\n\r\nimport { \r\n    REGISTRO_EXITOSO,\r\n    REGISTRO_ERROR,\r\n    OBTENER_USUARIO,\r\n    LOGIN_EXITOSO,\r\n    LOGIN_ERROR,\r\n    CERRAR_SESION\r\n} from '../../types';\r\n\r\nconst AuthState = props => {\r\n    const initialState = {\r\n        token: localStorage.getItem('token'),\r\n        autenticado: null,\r\n        usuario: null, \r\n        mensaje: null, \r\n        cargando: true\r\n    }\r\n\r\n    const [ state, dispatch ] = useReducer(AuthReducer, initialState);\r\n\r\n    const registrarUsuario = async datos => {\r\n        try {\r\n\r\n            const respuesta = await clienteAxios.post('/api/usuarios', datos);\r\n            console.log(respuesta.data);\r\n\r\n            dispatch({\r\n                type: REGISTRO_EXITOSO,\r\n                payload: respuesta.data\r\n            });\r\n\r\n            // Obtener el usuario\r\n            usuarioAutenticado();\r\n        } catch (error) {\r\n            // console.log(error.response.data.msg);\r\n            const alerta = {\r\n                msg: error.response.data.msg,\r\n                categoria: 'alerta-error'\r\n            }\r\n\r\n            dispatch({\r\n                type: REGISTRO_ERROR,\r\n                payload: alerta\r\n            })\r\n        }\r\n    }\r\n\r\n    // Retorna el usuario autenticado\r\n    const usuarioAutenticado = async () => {\r\n        const token = localStorage.getItem('token');\r\n        if(token) {\r\n            tokenAuth(token);\r\n        }\r\n\r\n        try {\r\n            const respuesta = await clienteAxios.get('/api/auth');\r\n            // console.log(respuesta);\r\n            dispatch({\r\n                type: OBTENER_USUARIO,\r\n                payload: respuesta.data.usuario\r\n            });\r\n\r\n        } catch (error) {\r\n            console.log(error.response);\r\n            dispatch({\r\n                type: LOGIN_ERROR\r\n            })\r\n        }\r\n    }\r\n\r\n    // Cuando el usuario inicia sesión\r\n    const iniciarSesion = async datos => {\r\n        try {\r\n            const respuesta = await clienteAxios.post('/api/auth', datos);\r\n            \r\n            dispatch({\r\n                type: LOGIN_EXITOSO,\r\n                payload: respuesta.data\r\n            });\r\n\r\n            // Obtener el usuario\r\n            usuarioAutenticado();\r\n        } catch (error) {\r\n            console.log(error.response.data.msg);\r\n            const alerta = {\r\n                msg: error.response.data.msg,\r\n                categoria: 'alerta-error'\r\n            }\r\n\r\n            dispatch({\r\n                type: LOGIN_ERROR,\r\n                payload: alerta\r\n            })\r\n        }\r\n    }\r\n\r\n    // Cierra la sesión del usuario\r\n    const cerrarSesion = () => {\r\n        dispatch({\r\n            type: CERRAR_SESION\r\n        })\r\n    }\r\n\r\n    return(\r\n        <AuthContext.Provider\r\n            value={{\r\n                token: state.token,\r\n                autenticado: state.autenticado,\r\n                usuario: state.usuario,\r\n                mensaje: state.mensaje,\r\n                cargando: state.cargando,\r\n                registrarUsuario,\r\n                iniciarSesion,\r\n                usuarioAutenticado,\r\n                cerrarSesion\r\n            }}\r\n        >{props.children}\r\n\r\n        </AuthContext.Provider>\r\n    )\r\n}\r\nexport default AuthState;\r\n"]},"metadata":{},"sourceType":"module"}